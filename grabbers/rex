#!/usr/bin/env perl
#
# "Rex"

my $version  = '10.3.2'; 

# An Australian TV Guide Grabber (a.k.a. tv_grab_au)
# by Max Barry
# http://maxbarry.com
# 
# Based on the long-serving but currently defunct NMSN Australian TV grabber 
# by Michael 'Immir' Smith
# 
# Use --help for command-line options.
# 
# A current version of this script, plus a README file, might be here:
# http://www.whuffy.com/tv_grab_au/
# 
# 10.1.0 - updated 17th Feb 2017 - interim fixes to parsing and URL changes
# 10.2.0 - updated 3rd Mar 2017  - version step with push to testing repo
# 10.3.0 - updated 4th Mar 2017  - updated to be a bit more tidy
#                                - remove dependency on Date::Parse that was
#                                  added in 10.1.0 and promptly forgotten about.
#                                - removed ugly ugly duration hack and replaced with
#                                  proper solution
#                                - cache fixes.
#                                - various misc others.
# 10.3.1 - updated 6th Mar 2017  - override for SBS v SBS ONE incorrect naming on yourtv.com.au
# 10.3.2 - updated 6th Mar 2017  - reverting the override from 10.3.1
#
#
#
#
#
# todo
# guard against program running over midnight (ie over two days)

use strict;
use warnings;
use Getopt::Long;
use Date::Manip;
use File::Path;
use File::Basename;
use Data::Dumper;
use HTML::TreeBuilder;
use POSIX;
use Encode;
use JSON;

use XMLTV;
use XMLTV::Ask;

use Shepherd::Common;

# ---------------------------------------------------------------------------
# --- Global Variables

my $progname = "Rex";
my $lang = "en";

my $DATASOURCE              = "https://www.yourtv.com.au";
my $DATASOURCE_GUIDE        = "$DATASOURCE/api/guide/";
my $DATASOURCE_DETAIL       = "$DATASOURCE/api/airings/";


my $runtime = time();
my $laststats = $runtime;
my $firstfetch;
my $debug = 0;
my $opt = { };
my $channels;
my $opt_channels;
my $gaps;
my %chanid;
my $cached;
my $lastpids;
my $precache;
my $ua;
my $sid;
my $jsc;
my %shows;
my $numshows;
my %stats;
my $dcount;

# ---------------------------------------------------------------------------
# --- Setup

print "$progname $version\n";

$| = 1;

Getopt::Long::Configure(qw/pass_through/);

get_command_line_options();

print "Ignoring --config-file option.\n" if ($opt->{'config-file'});

exit 0 if ($opt->{version});

help() if ($opt->{help});

set_defaults();
read_channels_file();
unless ($channels)
{
    print "ERROR: No channels requested. Please use --channels_file.\n";
    exit 2;
}

read_gaps_file();

if ($opt->{test})
{
  print "Test mode: won't write XML or cache.\n";
  $opt->{output} = undef;
}
	
build_channel_map();

if ($opt->{'show-channels'})
{
  show_channels();
  exit 0;
}

if ($debug or $opt->{'show-config'})
{
  show_config();
  exit 0 if ($opt->{'show-config'});
}

restore_cache();

if ($opt->{'dump-cache'})
{
  dump_cache();
  exit 0;
}

initialize_stats();

# ---------------------------------------------------------------------------
# --- Go!

get_guide_data();

get_details_data();

save_cache() if ($numshows);

write_xml();

print stats(1);

Shepherd::Common::print_stats($progname, $version, $runtime, %stats);

exit 0;

# ---------------------------------------------------------------------------
# --- Stop!


#
# Subs!
# 

sub get_guide_data
{
  print "Grabbing data for days " . ($opt->{offset} + 1) .
        " - $opt->{days}" . 
	($opt->{output} ? " into " . $opt->{output} : '') .
	".\n";

  refresh_ua() unless ($ua);

  my ($guidedata, $date, $dow, $fullday, $url);

  for my $day ($opt->{offset} .. $opt->{days} - 1)
  {
    $date = Ymd(DateCalc("now", "+ $day days"));

    $dow = substr(localtime($runtime + (86400 * $day)).'', 0, 3);
    print "Day $day ($dow).\n" if ($debug);
    print "Date $date ($dow).\n" if ($debug);

    $url = sprintf "%s?day=%s&format=json&region=%d", $DATASOURCE_GUIDE, lc($dow), $opt->{region};
    $guidedata = get_page($url);
    parse_guide($guidedata, $date) if ($guidedata);
  }
  $numshows = scalar(keys %$precache);
  print "Shows found: $numshows.\n";
}

#
# This sub fills up %shows with details, either from the cache or
# from the web.
#
sub get_details_data
{
  $firstfetch = time();
  my $show;
  foreach my $pid (keys %$precache)
  {
    if ($cached->{$pid})
    {
      print "Cached: " . $cached->{$pid}->{title}[0][0] . ".\n" if ($debug);
      if (verify_cache($pid))
      {
        $shows{$pid} = $cached->{$pid};
        $stats{cache_hits}++;
      }
      else
      {
        print "Cache has stale data for \"" . $cached->{$pid}->{title}[0][0] .
	      "\": fetching fresh data.\n" if ($debug);
	$stats{cache_changes}++;
      }
    }
    unless ($shows{$pid})
    {
      $show = download_show($pid);
      if ($show)
      {
        $show->{channel}=$precache->{$pid}->{channel}; # this is a fix for undistinguished channels
        $shows{$pid} = $show;
	$cached->{$pid} = $show;
        $stats{detail_pages}++;
      }
      else
      {
	print "Failed to parse show $pid.\n";
      }
    }
    if ($opt->{stats} and time() - $laststats >= $opt->{stats})
    {
      print stats();
    }
  }
}

sub verify_cache
{
  my $pid = shift;

# disabled cache verify on the stop time and subtitle as the precache wont hold those values from
# the new guide at this point and the subsequent compare just returns a valid compare regardless.
#
# disabled cache verify on the title because it appears that the shepherd cache implementation
# stores the title using the reconciler title. This will often fail the compare even just om
# successive runs and causes a much slower execution.
#
# in my opinion the cache verify on starttime combined with the cache clean on open combined with
# using the show id as the key should be sufficient to prevent the cache returning false positives.

  my @c = ( 
#            [ 
#	      'Title', 
#	      $cached->{$pid}->{title}[0][0], 
#	      $precache->{$pid}->{title} 
#	    ],
	    [ 
	      'Start time',
	      $cached->{$pid}->{start},
	      $precache->{$pid}->{start}
	    ],
#	    [
#	      'Stop time',
#	      $cached->{$pid}->{stop},
#	      $precache->{$pid}->{stop}
#	    ],
#	    [
#	      'Subtitle',
#	      ($cached->{$pid}->{'sub-title'} ? $cached->{$pid}->{'sub-title'}[0][0] : undef),
#	      $precache->{$pid}->{'sub-title'}
#	    ]
	  ); 
  foreach my $cmp (@c)
  {
    return 0 unless compare_caches($cmp->[0], $cmp->[1], $cmp->[2]);
  }
  return 1;
}

sub compare_caches
{
  my ($name, $arg1, $arg2) = @_;

  # Special case for subtitles.
  return 1 if ($name eq 'Subtitle' and !$arg2);
  # Special case for no precache stop.
  return 1 if ($name eq 'Stop time' and !$arg2);
  
  $arg1 = '--missing--' unless $arg1;
  $arg2 = '--missing--' unless $arg2;

  return 1 if $arg1 eq $arg2;

  print "$name mismatch: \"$arg1\" vs \"$arg2\".\n" if ($debug);
print "$name mismatch: \"$arg1\" vs \"$arg2\".\n";
  return 0;
}

sub download_show
{
    my ($pid, $recurse_count) = @_;

    $recurse_count ||= 0;
    return undef if ($recurse_count > 2);

    $dcount++;

    my $result;

    print "Downloading # $pid (" . $precache->{$pid}->{title} . ").\n" if ($debug);
    my $url = sprintf "%s%d", $DATASOURCE_DETAIL, $pid;
    my $detailsdata = get_page($url);
    $result = parse_details($detailsdata, $pid) if ($detailsdata);
    unless ($detailsdata and $result)
    {
	refresh_ua();
	return download_show($pid, $recurse_count+1);
    }

    return $result;
}

sub save_cache
{
  return if ($opt->{test} or $opt->{nowrite_cache});
  print "Saving cache.\n";
  Shepherd::Common::write_cache($opt->{'cache-file'}, $cached);
}

sub write_xml
{
  return if ($opt->{test});
  
  my %writer_args = ( encoding => 'ISO-8859-1' );

  print "Writing XML.\n";

  if ($opt->{output}) 
  {
    my $fh = new IO::File(">" . $opt->{output})  
  	     or die "Can't open " . $opt->{output} . ": $!";
    $writer_args{OUTPUT} = $fh;
  }

  my $writer = new XMLTV::Writer(%writer_args);

  $writer->start
    ( { 'source-info-url'    => $DATASOURCE,
        'source-info-name'   => "Datasource Name",
        'generator-info-name' => "$progname $version"} );

  for my $channel (sort keys %$channels) 
  {
    my $chanid = $chanid{lc $channel};
    $writer->write_channel( { 'display-name' => [[$channel, $lang]],
                              'id' => $chanid } );
  } 

  foreach my $pid (keys %shows)
  {
    print "- " . $shows{$pid}->{'title'}[0][0] . "\n" if ($debug);
    $writer->write_programme($shows{$pid});
  }

  $writer->end();
}

sub refresh_ua
{
  print "Refreshing UA.\n" if ($debug);
  if ($ua)
  {
     print stats() if ($debug and $opt->{stats});
     print "Sleeping...\n" if ($debug);
     sleep_for(5 + int(rand(20)));
  }

  $ua = Shepherd::Common::setup_ua( cookie_jar => 1 );

  # Set initial cookie
  my $url = "$DATASOURCE/guide/default.aspx?action=change&region_id=" . $opt->{region};
  unless (get_page(url => $url, retries => 4)) # Try hard to fetch main page
  {
      print "Unable to fetch region page. No connectivity? Exiting.\n";
      print stats(1);
      die "Can't acquire region cookie.\n";
  }

  $dcount = 0;
}

sub refresh_sid
{
  my ($version, $key, $val) = @_;

  $sid = $val if ($key eq 'CFID');
}

sub restore_cache
{
  unless ($opt->{'ignore-cache'} or $opt->{'rebuild-cache'})
  {
    $cached = Shepherd::Common::read_cache(\$opt->{'cache-file'});
  }
  if ($cached)
  {
    print "Retrieved " . keys(%$cached) . " cached items from file.\n";
    clean_cache();
  }
  else
  {
    $cached = { };
    print "Not using cache.\n";
  }
}

sub clean_cache
{
    my $r = expand_date(localtime($runtime - (27*3600))."");
    my $c = 0;
    print "Removing cache items that finish earlier than $r.\n" if ($debug);
    foreach (keys %$cached)
    {
	if (Date_Cmp($r, $cached->{$_}->{stop}) == 1)
	{
	    print "Removing $cached->{$_}->{title}[0][0] (" . Ymd($cached->{$_}->{stop}). ")\n" if ($debug);
print "Removing $cached->{$_}->{title}[0][0] (" . Ymd($cached->{$_}->{stop}). ")\n";
	    delete $cached->{$_};
	    $c++;
	}
    }
    print "Removed $c stale items from cache.\n";
}

sub dump_cache
{
  print "Cache: " . Dumper($cached) . "\n";
}

sub initialize_stats
{
    %stats = ( );
    foreach (qw( successful_requests failed_requests slept_for bytes detail_pages cache_hits cache_changes failed_parses ))
    {
	$stats{$_} = 0;
    }
}

sub stats
{
  my $finished = shift;

  my $t = time() - $runtime;
  
  my $ret = "$progname $version " . 
            ($finished ? "finished" : "in progress") .
	    ":\n";
  $ret .= sprintf
	" %d shows grabbed\n" .
  	" %d downloads, including %d detail pages (%d KB)\n" .
        " %d cache hits, %d changes from cache\n" .
	" %d failed downloads, %d failed parses\n",
	scalar(keys %shows),
        $stats{successful_requests}, $stats{detail_pages}, ($stats{bytes}/1024),
	$stats{cache_hits}, $stats{cache_changes},
	$stats{failed_requests}, $stats{failed_parses};
  $ret .= sprintf " Time elapsed: %s (spent sleeping: %s)\n",
                  timestats($t), timestats($stats{slept_for});
  unless ($finished or !$stats{detail_pages})
  {
    $t = ((((time() - $firstfetch) * ($numshows - $stats{cache_hits})) / $stats{detail_pages})) - $t;
    
    $ret .= " Estimated time remaining: " . timestats($t) . "\n";
  }
  $laststats = time();
  return $ret;
}

sub timestats
{
  my $t = shift;

  my $ret = '';
  if ($t >= 3600)
  {
    $ret .= sprintf("%d hr ", $t / 3600);
    $t = $t % 3600;
  }
  $ret .= sprintf("%d min %d sec", $t / 60, $t % 60);
  return $ret;
}

sub get_page
{
  my $ret = Shepherd::Common::get_url(@_);
  if ($stats{successful_requests} and $stats{failed_requests} > ($stats{successful_requests} * 5))
  {
      printf "Exiting: %d failed network requests vs %d successes.\n",
             $stats{failed_requests}, $stats{successful_requests};
      print stats(1);
      die "Too many network failures.";
  }
  $ret =~ s/&nbsp;/ /g if ($ret);
  return $ret;
}

sub parse_guide
{
    my ($guidedata, $date) = @_;

    print "Parsing guide page.\n" if ($debug);

    my $data = JSON::decode_json($guidedata);

    my $rows = $data->[0]{channels};

    my @channels_seen;

    foreach my $row (@$rows)
    {
	my $channame = $row->{name};
	my $curchan = translate_channel_name($channame, scalar(grep($_ eq $channame, @channels_seen)));
	push @channels_seen, $channame;
	if (!$channels->{$curchan})
	{ 
	    print "Ignoring unsubscribed channel $curchan.\n" if ($debug);
print "Ignoring unsubscribed channel $curchan.\n";
	    next;
	}
	print "Channel: $curchan.\n" if ($debug);

        foreach my $block (@{$row->{blocks}})
	{
            my $duration = $block->{offsets};
            my $ignore_first_show = 0;
	    # if the text margin-left appears in the duration it means that the first show in this block
            # is actually from the previous day and needs to be ignored.
            # note - its the first show in the block not the whole block. But assuming whole block for debugging
	    if ($duration =~ /margin-left/) {
		$ignore_first_show = 1;
	    }

	    foreach my $show (@{$block->{shows}})
	    {
                if ($ignore_first_show == 1)
                {
                    $ignore_first_show = 0;
                    next;
                }
                my $pid = $show->{id};

                $precache->{$pid} = {
                    'title' => $show->{title},
                    'start' => convert_date(sprintf "%s %s", $date, $show->{date}),
#                    'stop' => $real_end_time, # cannot do stop time here if using duration from details page
#                    'debug_showid' => $show->{id},
#                    'debug_programid' => $show->{programId},
                    'channel' => $channels->{$curchan},
                };
	    }
	}
    }
}

# The guide pages for some regions don't provide any way to distinguish
# between (eg) "Prime (Regional)" and "Prime (Albury)" in the same region,
# other than the order in which they're listed. (They're both called
# simply "Prime".) This func tracks which is which.
sub translate_channel_name
{
    my ($chan, $seen_before) = @_;

    my $rchans;

    $rchans = {
	95 => { 'TEN' => [ 'TEN (VIC: Mildura/Sunraysia)', 'TEN (Mildura Digital)' ] },
	};

    my $region = $opt->{region};

    return $chan unless ($rchans->{$region} and $rchans->{$region}->{$chan});
    return $rchans->{$region}->{$chan}->[$seen_before];
}

sub parse_details 
{
    my ($detailsdata, $pid) = @_;

    my $data = JSON::decode_json($detailsdata);

    print Dumper($data) if ($debug);

    my $show = $precache->{$pid};
    my %type;
    my %video;

    my $lang = $data->{language} || 'en';

    $show->{title} = [[ $data->{program}->{title}, $lang ]];

    $show->{language} = [ $lang ];

    if (!$data->{synopsis}) {
        $show->{desc} = [[ $data->{program}->{title}, $lang ]]; }
    else {
        $show->{desc} = [[ $data->{synopsis}, $lang ]]; }

    if ($data->{classification})
    {
	$show->{rating} = [[ uc $data->{classification}, 'ABA', undef]];
    }

    if ($data->{repeat})
    {
	$show->{'previously-shown'} = { };
    }

    if ($data->{premiere})
    {
	$show->{'premiere'} = [ 'Premiere' ];
	$type{'premiere'} = 1;
    }
    if ($data->{episodeTitle})
    {
        $show->{'sub-title'} = [[ $data->{episodeTitle}, $lang ]];
    }

    if ($data->{mainCast})
    {
	$show->{'credits'}{'actor'} = [ split(/, ?/, strip_whitespace($data->{mainCast})) ];
    }

    if ($data->{widescreen})
    {
	$video{'aspect'} = '16:9';
    }

    if ($data->{highDefinition})
    {
	$video{'quality'} = 'HDTV';
    }

    if ($data->{live})
    {
	$type{live} = 1;
    }

    if ($data->{closedCaptions} || $data->{subtitles})
    {
	$show->{'subtitles'} = [ { 'type' => 'teletext' } ];
    }

    if ($data->{program}->{country})
    {
	$show->{'country'} = [[ $data->{program}->{country}, 'en' ]];
    }

    if ($data->{program}->{yearReleased})
    {
        $show->{'date'} =  $data->{program}->{yearReleased};
    }

    if ($data->{duration})
    {
        $show->{'length'} = ($data->{duration} *60);
        my $s = $show->{'start'};
        my $txt_date = (substr $s, 0, 4) . "-" . (substr $s, 4, 2) . "-" . (substr $s, 6, 2) . "-" . (substr $s, 8, 2) . ":" . (substr $s, 10, 2) . ":" . (substr $s, 12, 2);
        $show->{'stop'} = ParseDateString("epoch " . (UnixDate($txt_date,'%s') + ($data->{duration} * 60)));
        $show->{'stop'} =~ tr/://d;
    }
    elsif ($data->{realtimeDurationSeconds})
    {
        $show->{length} = $data->{realtimeDurationSeconds};
        my $s = $show->{'start'};
        my $txt_date = (substr $s, 0, 4) . "-" . (substr $s, 4, 2) . "-" . (substr $s, 6, 2) . "-" . (substr $s, 8, 2) . ":" . (substr $s, 10, 2) . ":" . (substr $s, 12, 2);
        $show->{'stop'} = ParseDateString("epoch " . (UnixDate($txt_date,'%s') + $data->{realtimeDurationSeconds}));
        $show->{'stop'} =~ tr/://d;
    }

    $show->{'video'} = \%video if (%video);

    $type{'movie'} = 1 if ($data->{movie} && !$data->{series});
    $type{'series'} = 1 if (!$data->{movie} && $data->{series});

    $show->{'category'} = [ &Shepherd::Common::generate_category($show->{'title'}[0][0], undef, %type) ];

#    print Dumper($show) if ($debug);

    return $show;
}

sub bad_parse
{
  my $msg = shift;
  print "Parsing error: $msg.\n";
  $stats{failed_parses}++;
  if ($stats{failed_parses} > 4 
	  and 
      ($firstfetch ? !scalar(keys %shows) : !scalar(keys %$precache)))
  {
      print "ERROR! Unable to parse any shows! Looks like a major problem. " .
	    "Exiting.\n";
      print stats(1);
      die "Major parsing error";
  }
  return 0;
}

sub is_outside_gaps
{
  my ($ch, $start, $stop) = @_;

  unless ($start and $stop)
  {
      print "ERROR: start time of $start and stop of $stop.\n";
      return 1;	# skip it
  }

  $start = udate_to_epoch($start);
  $stop = udate_to_epoch($stop);

  foreach my $gap (@{$gaps->{$ch}})
  {
      if ($gap =~ /(\d+)-(\d+)/)
      {
	  return 0 if ($stop > $1 and $start < $2);
      }
  }
  return 1;
}

sub udate_to_epoch
{
    my $udate = shift;

    if ($udate =~ /(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/)
    {
	my ($year, $month, $day, $hour, $minute, $second) = ($1, $2, $3, $4, $5, $6);
	$month--;
	$year -= 1900;
	return POSIX::strftime("%s", $second, $minute, $hour, $day, $month, $year);
    }
    die "Unable to parse udate $udate!";
}

sub read_channels_file 
{
    read_config_file('channels', 'channels_file');
}

sub read_gaps_file
{
    read_config_file('gaps', 'gaps_file');
}

sub read_config_file
{
    my ($name, $arg) = @_;

    return unless ($opt->{$arg});
    print "Reading $name file: $opt->{$arg}\n";
    if (-r $opt->{$arg})
    {
	local (@ARGV, $/) = ($opt->{$arg});
	no warnings 'all';
	eval <>;
	die "Can't parse $name file: $@" if ($@);
    }
    else
    {
	print "Unable to read $name file.\n";
    }
}

sub get_command_line_options
{
  GetOptions($opt, qw(
			help
			debug
			output=s
			days=i
			offset=i
			region=i
			show-config
			show-channels
			rebuild-cache
			ignore-cache
			nowrite-cache
			dump-cache
			cache-file=s
			config-file=s
			channels_file=s
			gaps_file=s
			stats=i
			test
			desc
			version
			warper
		    ));
  $debug = $opt->{debug};   

  if (@ARGV)
  {
    print "\nWARNING: Ignoring unknown option(s): @ARGV\n\n";
  }
}

sub show_config
{
  my $short = shift;
  
  print "\nConfiguration\n".
          "-------------\n";
  unless ($short)
  {
    print "Debug mode : " . is_set($debug) . "\n" .
          "Test mode  : " . is_set($opt->{test}) . "\n" .
          "Webwarping : " . is_set($opt->{warper}) . "\n" .
	  "Cache file : " . $opt->{'cache-file'};
    print ' (not reading)' if ($opt->{'ignore-cache'} or $opt->{'rebuild-cache'});
    print ' (not updating)' if ($opt->{test} or $opt->{'ignore-cache'} or $opt->{'nowrite-cache'});
    print "\n" .
	  "Output file: " . ($opt->{output} ? $opt->{output} : "None") . "\n" .
	  "Chann file : $opt->{channels_file}\n" .
	  ($opt->{gaps_file} ? "Gaps file  : " . $opt->{gaps_file} . "\n" : '') .
	  "Statistics : " . ($opt->{stats} ? "every " . $opt->{stats} . " seconds" : "off") . "\n";
  }
  print   "Region ID  : $opt->{region}\n" .
	  "Days wanted: $opt->{days} (offset: $opt->{offset})\n";
  show_channels();
  print "\n";
}

sub is_set
{
  my $arg = shift;
  return $arg ? "Yes" : "No";
}

sub show_channels
{
  print "Subscribed channels:\n";
  print "    $_ -> $channels->{$_}\n" for sort keys %$channels;
}

sub build_channel_map
{
  # --- extract sorted subscribed channel list from config-file hash;
  # also compute canonicalised lowercased channel to xmltvid hash
  %chanid = map { lc $_, $channels->{$_} } keys %$channels;
}

sub set_defaults
{
  my $defaults = {
	  'days' => 7,
	  'offset' => 0,
	  'region' => 94,
	  'stats' => 90,
	  'output' => getcwd() . '/output.xmltv',
	  'cache-file' => getcwd() . '/cache.dat',
	  'channels_file' => getcwd() . '/channels.conf'
  };
					      
  foreach (keys %$defaults)
  {
    unless (defined $opt->{$_})
    {
      $opt->{$_} = $defaults->{$_};
    }
  }

  if ($opt->{'days'} > 7)
  {
      # Due to URL scheme of '/guide/wed/night', we cannot grab
      # more than 7 days (including today).
      print "Restricting to 7 days: rex will return bad data if asked for day 8.\n";
      $opt->{'days'} = 7;
  }

  Shepherd::Common::set_defaults(
	stats => \%stats, 
	delay => "0-2",
	debug => $debug,
	webwarper => $opt->{warper}
    );
}

sub convert_date
{
    my $str = shift;

    my $ret = ParseDate($str);
    $ret =~ tr/://d;

    return $ret;
}

sub expand_date
{
  my $t = shift;
  $t =~ s/\./:/;
  $t="$1:00$2 $3" if ($t =~ m:^(\d+)([ap]m)\s+(.*?)$:o);
  my $ret = ParseDate($t);
  $ret =~ tr/://d;

  return $ret;
}

sub Ymd { UnixDate($_[0], "%Y-%m-%d") or die "Date problem in Ymd($_[0])" }

sub strip_whitespace 
{ 
  my $str = shift; 
  $str =~ s/^\s*(.*?)\s*$/$1/; 
  return $str;
}

sub sleep_for
{
    my $n = shift;
    return unless ($n);
    sleep $n;
    $stats{slept_for} += $n;
}

sub is_true
{
    my $str = shift;

    return 1 if ($str and lc $str eq 'true');
}

sub help
{
  print q{
Command-line options:
    --help                 Print this message

    --version              Show current version
    --show-channels        Show subscribed channels & exit
    --show-config          Show configuration details & exit
    --dump-cache           Show cache & exit
		
    --cache-file <file>    Use the specified cache file
    --output <file>        Write XML into the specified file
    --channels_file <file> Read channel subscriptions from file
    --gaps_file <file>     Read gaps from file

    --region <n>           Grab data for region code <n>
    --days <n>             Grab <n> days of data (today being day 1)
    --offset <n>           Skip the first <n> days

    --stats <n>            Print stats every n secs (0=off)
    --debug                Print lots of debugging output

    --warper               Use webwarper.net anonymizer

    --test                 Don't write any output or update cache
    --ignore-cache         Neither read nor update cache
    --nowrite-cache        Read but don't update cache
    --rebuild-cache        Destroy and rebuild cache
};
  exit 0;
}

